<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on</title><link>https://docs.atsign.com/sdk/java/</link><description>Recent content in Java on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.atsign.com/sdk/java/index.xml" rel="self" type="application/rss+xml"/><item><title>CLIs</title><link>https://docs.atsign.com/sdk/java/clis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/clis/</guid><description>There are various CLIs (command-line interfaces) that uses the Java SDK to interact with a secondary server.
Prerequisite #
To run the CLIs:
Edit settings in at_client/src/main/resources/config.yaml cd to at_java/at_client and run mvn install Run java -cp &amp;quot;target/client-1.0-SNAPSHOT.jar:target/lib/*&amp;quot; org.atsign.client.cli.&amp;lt;CLI&amp;gt; &amp;lt;args&amp;gt;. Replace “&amp;lt;CLI&amp;gt;” with one of the CLIs (Register, Get, Scan,&amp;hellip;) and “&amp;lt;args&amp;gt;” with List of CLIs #
If you want to interact with the atProtocol through a command-line experience, see our CLIs in src/main/java/org/atsign/client/cli/.</description></item><item><title>Creating an instance of AtClient</title><link>https://docs.atsign.com/sdk/java/instance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/instance/</guid><description>To create an instance of AtClient, use one of the factory methods. Note: you must have the .atKeys file in the ~/.atsign/keys directory. You can generate a .atKeys file from using the Register CLI or Onboaring CLI if you already own the atSign.
String ATSIGN_STR = &amp;#34;@bob&amp;#34;; AtSign atSign = new AtSign(ATSIGN_STR); AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(atSign); } catch (AtException e) { System.err.println(e); e.printStackTrace(); } // use atClient There are a number of other factory methods for creating an AtClient instance to suit your needs.</description></item><item><title>Getting Secondary.Address</title><link>https://docs.atsign.com/sdk/java/getting-secondary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/getting-secondary/</guid><description>There are a number to get the address of a secondary server belonging to an atSign.
You have the atSign and rootUrl // Use Secondary.AddressFinder String ROOT_URL = &amp;#34;root.atsign.org:64&amp;#34;; String ATSIGN_STR = &amp;#34;@bob&amp;#34;; AtSign atSign = new AtSign(ATSIGN_STR); Secondary.AddressFinder saFinder = ArgsUtil.createAddressFinder(ROOT_URL); Secondary.Address sAddress = null; try { sAddress = saFinder.findSecondary(atSign); } catch (NoSuchSecondaryException | IOException e) { System.err.println(e); e.printStackTrace(); } // use sAddress You have the host and port of the secondary server // Use Secondary.</description></item><item><title>Installation</title><link>https://docs.atsign.com/sdk/java/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/installation/</guid><description>Requirements #
There are two requirements for developing with at_java on your machine.
Java 8 or higher Maven A code editor, see getting started with Java Compile JAR #
If you&amp;rsquo;d like to use at_java as a dependency, you can compile at_java into a JAR by following the instructions below:
cd at_client to be in the at_client directory. mvn install JAR file created in target/ named similarly to client-1.</description></item><item><title>Introduction</title><link>https://docs.atsign.com/sdk/java/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/introduction/</guid><description>atProtocol #
Overview #
The atProtocol is the underlying network protocol used by the atPlatform. The atPlatform provides people, entities, and things with unique identifiers called atSigns.
Each atSign creates its own public and private cryptographic key pair. The private keys are kept private and public keys made available globally through the atProtocol.
The atProtocol provides verbs for interacting with fully qualified atSigns and the data in their secondary servers.</description></item><item><title>Key Types</title><link>https://docs.atsign.com/sdk/java/keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/keys/</guid><description>Overview #
If you’ve ever used our dart library before, you’ll be familiar with AtKey.
Just like how hash maps have a key-value pair, the secondary server holds an AtKey-AtValue pair. To access the AtValue, you must provide an AtKey containing data like the keyName, sharedBy, and/or sharedWith.
There are 4 types of keys in at_java. Each key type represents what kind of data it holds and also exhibits different properties.</description></item><item><title>PublicKey interactions</title><link>https://docs.atsign.com/sdk/java/public-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/public-key/</guid><description>PublicKeys are meant for public data. Authorized or unauthorized users are able to know of the existence of these keys (via scan) and the data is not encrypted.
Putting a PublicKey Example #
Sample code on how to put a public key associated with a public non-encrypted value into your secondary server. Any unauthenticated/authenticated atSign will be able to see the data without decrypting anything.
// 1. establish constants String ROOT_URL = &amp;#34;root.</description></item><item><title>SelfKey interactions</title><link>https://docs.atsign.com/sdk/java/self-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/self-key/</guid><description>SelfKeys hold data that are intended for the atSign owner of the secondary server. Data is encrypted with the symmetric selfEncryptionKey.
Putting a SelfKey Example #
Learn how to create and put a SelfKey associated with some value. This value will be encrypted with your selfEncryptionKey and only the creator of the AtKey will be able to see and decrypt the data. Ensure that the sharedBy atsign is an atSign you have the keys to.</description></item><item><title>SharedKey interactions</title><link>https://docs.atsign.com/sdk/java/shared-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.atsign.com/sdk/java/shared-key/</guid><description>SharedKeys are for data you want to share with another atSign. The sharedBy atSign should be you. The sharedWith atSign should be the receiver.
Putting SharedKey Example #
Learn how to create a SharedKey in your secondary. The sharedBy atSign should be you, the authenticated creator of the key, while the sharedWith atSign should be the recipient of the key.
// 1. establish constants String ROOT_URL = &amp;#34;root.atsign.org:64&amp;#34;; String ATSIGN_STR_SHARED_BY = &amp;#34;@bob&amp;#34;; // my atSign (sharedBy) String ATSIGN_STR_SHARED_WITH = &amp;#34;@alice&amp;#34;; // other atSign (sharedWith) boolean VERBOSE = true; String KEY_NAME = &amp;#34;test&amp;#34;; int ttl = 30 * 60 * 1000; // 30 minutes String VALUE = &amp;#34;I love cheese 12345&amp;#34;; // 2.</description></item></channel></rss>